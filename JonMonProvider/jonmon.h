//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once

//*****************************************************************************
//
// Notes on the ETW event code generated by MC:
//
// - Structures and arrays of structures are treated as an opaque binary blob.
//   The caller is responsible for packing the data for the structure into a
//   single region of memory, with no padding between values. The macro will
//   have an extra parameter for the length of the blob.
// - Arrays of nul-terminated strings must be packed by the caller into a
//   single binary blob containing the correct number of strings, with a nul
//   after each string. The size of the blob is specified in characters, and
//   includes the final nul.
// - Arrays of SID are treated as a single binary blob. The caller is
//   responsible for packing the SID values into a single region of memory with
//   no padding.
// - The length attribute on the data element in the manifest is significant
//   for values with intype win:UnicodeString, win:AnsiString, or win:Binary.
//   The length attribute must be specified for win:Binary, and is optional for
//   win:UnicodeString and win:AnsiString (if no length is given, the strings
//   are assumed to be nul-terminated). For win:UnicodeString, the length is
//   measured in characters, not bytes.
// - For an array of win:UnicodeString, win:AnsiString, or win:Binary, the
//   length attribute applies to every value in the array, so every value in
//   the array must have the same length. The values in the array are provided
//   to the macro via a single pointer -- the caller is responsible for packing
//   all of the values into a single region of memory with no padding between
//   values.
// - Values of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary can be generated and collected on Vista or later.
//   However, they may not decode properly without the Windows 10 2018 Fall
//   Update.
// - Arrays of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary must be packed by the caller into a single region of
//   memory. The format for each item is a UINT16 byte-count followed by that
//   many bytes of data. When providing the array to the generated macro, you
//   must provide the total size of the packed array data, including the UINT16
//   sizes for each item. In the case of win:CountedUnicodeString, the data
//   size is specified in WCHAR (16-bit) units. In the case of
//   win:CountedAnsiString and win:CountedBinary, the data size is specified in
//   bytes.
//
//*****************************************************************************

#include <wmistr.h>
#include <evntrace.h>
#include <evntprov.h>

#ifndef ETW_INLINE
  #ifdef _ETW_KM_
    // In kernel mode, save stack space by never inlining templates.
    #define ETW_INLINE DECLSPEC_NOINLINE __inline
  #else
    // In user mode, save code size by inlining templates as appropriate.
    #define ETW_INLINE __inline
  #endif
#endif // ETW_INLINE

#if defined(__cplusplus)
extern "C" {
#endif

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_USE_KERNEL_MODE_APIS macro:
// Controls whether the generated code uses kernel-mode or user-mode APIs.
// - Set to 0 to use Windows user-mode APIs such as EventRegister.
// - Set to 1 to use Windows kernel-mode APIs such as EtwRegister.
// Default is based on whether the _ETW_KM_ macro is defined (i.e. by wdm.h).
// Note that the APIs can also be overridden directly, e.g. by setting the
// MCGEN_EVENTWRITETRANSFER or MCGEN_EVENTREGISTER macros.
//
#ifndef MCGEN_USE_KERNEL_MODE_APIS
  #ifdef _ETW_KM_
    #define MCGEN_USE_KERNEL_MODE_APIS 1
  #else
    #define MCGEN_USE_KERNEL_MODE_APIS 0
  #endif
#endif // MCGEN_USE_KERNEL_MODE_APIS

//
// MCGEN_HAVE_EVENTSETINFORMATION macro:
// Controls how McGenEventSetInformation uses the EventSetInformation API.
// - Set to 0 to disable the use of EventSetInformation
//   (McGenEventSetInformation will always return an error).
// - Set to 1 to directly invoke MCGEN_EVENTSETINFORMATION.
// - Set to 2 to to locate EventSetInformation at runtime via GetProcAddress
//   (user-mode) or MmGetSystemRoutineAddress (kernel-mode).
// Default is determined as follows:
// - If MCGEN_EVENTSETINFORMATION has been customized, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else if the target OS version has EventSetInformation, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else set to 2 (i.e. try to dynamically locate EventSetInformation).
// Note that an McGenEventSetInformation function will only be generated if one
// or more provider in a manifest has provider traits.
//
#ifndef MCGEN_HAVE_EVENTSETINFORMATION
  #ifdef MCGEN_EVENTSETINFORMATION             // if MCGEN_EVENTSETINFORMATION has been customized,
    #define MCGEN_HAVE_EVENTSETINFORMATION   1 //   directly invoke MCGEN_EVENTSETINFORMATION(...).
  #elif MCGEN_USE_KERNEL_MODE_APIS             // else if using kernel-mode APIs,
    #if NTDDI_VERSION >= 0x06040000            //   if target OS is Windows 10 or later,
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EtwSetInformation" via MmGetSystemRoutineAddress.
    #endif                                     // else (using user-mode APIs)
  #else                                        //   if target OS and SDK is Windows 8 or later,
    #if WINVER >= 0x0602 && defined(EVENT_FILTER_TYPE_SCHEMATIZED)
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EventSetInformation" via GetModuleHandleExW/GetProcAddress.
    #endif
  #endif
#endif // MCGEN_HAVE_EVENTSETINFORMATION

//
// MCGEN Override Macros
//
// The following override macros may be defined before including this header
// to control the APIs used by this header:
//
// - MCGEN_EVENTREGISTER
// - MCGEN_EVENTUNREGISTER
// - MCGEN_EVENTSETINFORMATION
// - MCGEN_EVENTWRITETRANSFER
//
// If the the macro is undefined, the MC implementation will default to the
// corresponding ETW APIs. For example, if the MCGEN_EVENTREGISTER macro is
// undefined, the EventRegister[MyProviderName] macro will use EventRegister
// in user mode and will use EtwRegister in kernel mode.
//
// To prevent issues from conflicting definitions of these macros, the value
// of the override macro will be used as a suffix in certain internal function
// names. Because of this, the override macros must follow certain rules:
//
// - The macro must be defined before any MC-generated header is included and
//   must not be undefined or redefined after any MC-generated header is
//   included. Different translation units (i.e. different .c or .cpp files)
//   may set the macros to different values, but within a translation unit
//   (within a single .c or .cpp file), the macro must be set once and not
//   changed.
// - The override must be an object-like macro, not a function-like macro
//   (i.e. the override macro must not have a parameter list).
// - The override macro's value must be a simple identifier, i.e. must be
//   something that starts with a letter or '_' and contains only letters,
//   numbers, and '_' characters.
// - If the override macro's value is the name of a second object-like macro,
//   the second object-like macro must follow the same rules. (The override
//   macro's value can also be the name of a function-like macro, in which
//   case the function-like macro does not need to follow the same rules.)
//
// For example, the following will cause compile errors:
//
//   #define MCGEN_EVENTWRITETRANSFER MyNamespace::MyClass::MyFunction // Value has non-identifier characters (colon).
//   #define MCGEN_EVENTWRITETRANSFER GetEventWriteFunctionPointer(7)  // Value has non-identifier characters (parentheses).
//   #define MCGEN_EVENTWRITETRANSFER(h,e,a,r,c,d) EventWrite(h,e,c,d) // Override is defined as a function-like macro.
//   #define MY_OBJECT_LIKE_MACRO     MyNamespace::MyClass::MyEventWriteFunction
//   #define MCGEN_EVENTWRITETRANSFER MY_OBJECT_LIKE_MACRO // Evaluates to something with non-identifier characters (colon).
//
// The following would be ok:
//
//   #define MCGEN_EVENTWRITETRANSFER  MyEventWriteFunction1  // OK, suffix will be "MyEventWriteFunction1".
//   #define MY_OBJECT_LIKE_MACRO      MyEventWriteFunction2
//   #define MCGEN_EVENTWRITETRANSFER  MY_OBJECT_LIKE_MACRO   // OK, suffix will be "MyEventWriteFunction2".
//   #define MY_FUNCTION_LIKE_MACRO(h,e,a,r,c,d) MyNamespace::MyClass::MyEventWriteFunction3(h,e,c,d)
//   #define MCGEN_EVENTWRITETRANSFER  MY_FUNCTION_LIKE_MACRO // OK, suffix will be "MY_FUNCTION_LIKE_MACRO".
//
#ifndef MCGEN_EVENTREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTREGISTER        EtwRegister
  #else
    #define MCGEN_EVENTREGISTER        EventRegister
  #endif
#endif // MCGEN_EVENTREGISTER
#ifndef MCGEN_EVENTUNREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTUNREGISTER      EtwUnregister
  #else
    #define MCGEN_EVENTUNREGISTER      EventUnregister
  #endif
#endif // MCGEN_EVENTUNREGISTER
#ifndef MCGEN_EVENTSETINFORMATION
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTSETINFORMATION  EtwSetInformation
  #else
    #define MCGEN_EVENTSETINFORMATION  EventSetInformation
  #endif
#endif // MCGEN_EVENTSETINFORMATION
#ifndef MCGEN_EVENTWRITETRANSFER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTWRITETRANSFER   EtwWriteTransfer
  #else
    #define MCGEN_EVENTWRITETRANSFER   EventWriteTransfer
  #endif
#endif // MCGEN_EVENTWRITETRANSFER

//
// MCGEN_EVENT_ENABLED macro:
// Override to control how the EventWrite[EventName] macros determine whether
// an event is enabled. The default behavior is for EventWrite[EventName] to
// use the EventEnabled[EventName] macros.
//
#ifndef MCGEN_EVENT_ENABLED
#define MCGEN_EVENT_ENABLED(EventName) EventEnabled##EventName()
#endif

//
// MCGEN_EVENT_ENABLED_FORCONTEXT macro:
// Override to control how the EventWrite[EventName]_ForContext macros
// determine whether an event is enabled. The default behavior is for
// EventWrite[EventName]_ForContext to use the
// EventEnabled[EventName]_ForContext macros.
//
#ifndef MCGEN_EVENT_ENABLED_FORCONTEXT
#define MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, EventName) EventEnabled##EventName##_ForContext(pContext)
#endif

//
// MCGEN_ENABLE_CHECK macro:
// Determines whether the specified event would be considered as enabled
// based on the state of the specified context. Slightly faster than calling
// McGenEventEnabled directly.
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled && McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
// This structure is for use by MC-generated code and should not be used directly.
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;      // Used as pointer to provider traits.
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif // MCGEN_TRACE_CONTEXT_DEF

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
//
// Determines whether an event with a given Level and Keyword would be
// considered as enabled based on the state of the specified context.
// Note that you may want to use MCGEN_ENABLE_CHECK instead of calling this
// function directly.
//
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;
}
#endif // MCGEN_LEVEL_KEYWORD_ENABLED_DEF

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
//
// Determines whether the specified event would be considered as enabled based
// on the state of the specified context. Note that you may want to use
// MCGEN_ENABLE_CHECK instead of calling this function directly.
//
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);
}
#endif // MCGEN_EVENT_ENABLED_DEF

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
#pragma warning(suppress: 26451) // Arithmetic overflow cannot occur, no matter the value of EnableBitCount
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif // MCGEN_PRIVATE_ENABLE_CALLBACK_V2

    return;
}

#endif // MCGEN_CONTROL_CALLBACK

#ifndef _mcgen_PENABLECALLBACK
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define _mcgen_PENABLECALLBACK      PETWENABLECALLBACK
  #else
    #define _mcgen_PENABLECALLBACK      PENABLECALLBACK
  #endif
#endif // _mcgen_PENABLECALLBACK

#if !defined(_mcgen_PASTE2)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE2(a, b) _mcgen_PASTE2_imp(a, b)
#define _mcgen_PASTE2_imp(a, b) a##b
#endif // _mcgen_PASTE2

#if !defined(_mcgen_PASTE3)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE3(a, b, c) _mcgen_PASTE3_imp(a, b, c)
#define _mcgen_PASTE3_imp(a, b, c) a##b##_##c
#endif // _mcgen_PASTE3

//
// Macro validation
//

// Validate MCGEN_EVENTREGISTER:

// Trigger an error if MCGEN_EVENTREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER);

// Trigger an error if MCGEN_EVENTREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER)
    MCGEN_EVENTREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTREGISTER);

// Validate MCGEN_EVENTUNREGISTER:

// Trigger an error if MCGEN_EVENTUNREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER);

// Trigger an error if MCGEN_EVENTUNREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER)
    MCGEN_EVENTUNREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTUNREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTUNREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTUNREGISTER);

// Validate MCGEN_EVENTSETINFORMATION:

// Trigger an error if MCGEN_EVENTSETINFORMATION is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION);

// Trigger an error if MCGEN_EVENTSETINFORMATION is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION)
    MCGEN_EVENTSETINFORMATION_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTSETINFORMATION is defined as a function-like macro:
typedef void MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_MCGEN_EVENTSETINFORMATION;
typedef int _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_, MCGEN_EVENTSETINFORMATION);

// Validate MCGEN_EVENTWRITETRANSFER:

// Trigger an error if MCGEN_EVENTWRITETRANSFER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER);

// Trigger an error if MCGEN_EVENTWRITETRANSFER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER)
    MCGEN_EVENTWRITETRANSFER_must_not_be_redefined_between_headers;;

// Trigger an error if MCGEN_EVENTWRITETRANSFER is defined as a function-like macro:
typedef void MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_MCGEN_EVENTWRITETRANSFER;
typedef int _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_, MCGEN_EVENTWRITETRANSFER);

#ifndef McGenEventWrite_def
#define McGenEventWrite_def

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventWrite _mcgen_PASTE2(McGenEventWrite_, MCGEN_EVENTWRITETRANSFER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventWrite(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID ActivityId,
    _In_range_(1, 128) ULONG EventDataCount,
    _Pre_cap_(EventDataCount) EVENT_DATA_DESCRIPTOR* EventData
    )
{
    const USHORT UNALIGNED* Traits;

    // Some customized MCGEN_EVENTWRITETRANSFER macros might ignore ActivityId.
    UNREFERENCED_PARAMETER(ActivityId);

    Traits = (const USHORT UNALIGNED*)(UINT_PTR)Context->Logger;

    if (Traits == NULL) {
        EventData[0].Ptr = 0;
        EventData[0].Size = 0;
        EventData[0].Reserved = 0;
    } else {
        EventData[0].Ptr = (ULONG_PTR)Traits;
        EventData[0].Size = *Traits;
        EventData[0].Reserved = 2; // EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA
    }

    return MCGEN_EVENTWRITETRANSFER(
        Context->RegistrationHandle,
        Descriptor,
        ActivityId,
        NULL,
        EventDataCount,
        EventData);
}
#endif // McGenEventWrite_def

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventRegister _mcgen_PASTE2(McGenEventRegister_, MCGEN_EVENTREGISTER)

#pragma warning(push)
#pragma warning(disable:6103)
// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ _mcgen_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    RegHandle - Pointer to registration handle.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if *RegHandle != 0). Repeatedly registering a provider is a bug
    and may indicate a race condition. However, for compatibility with previous
    behavior, this function will return SUCCESS in this case.

--*/
{
    ULONG Error;

    if (*RegHandle != 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(ProviderId, EnableCallback, CallbackContext, RegHandle);
    }

    return Error;
}
#pragma warning(pop)

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventUnregister _mcgen_PASTE2(McGenEventUnregister_, MCGEN_EVENTUNREGISTER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW and set *RegHandle = 0.

Arguments:

    RegHandle - the pointer to the provider registration handle

Remarks:

    If provider has not been registered (i.e. if *RegHandle == 0),
    return SUCCESS. It is safe to call McGenEventUnregister even if the
    call to McGenEventRegister returned an error.

--*/
{
    ULONG Error;

    if(*RegHandle == 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTUNREGISTER(*RegHandle);
        *RegHandle = (REGHANDLE)0;
    }

    return Error;
}

#endif // McGenEventRegisterUnregister

#ifndef _mcgen_EVENT_BIT_SET
  #if defined(_M_IX86) || defined(_M_X64)
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((((const unsigned char*)EnableBits)[BitPosition >> 3] & (1u << (BitPosition & 7))) != 0)
  #else // CPU type
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((EnableBits[BitPosition >> 5] & (1u << (BitPosition & 31))) != 0)
  #endif // CPU type
#endif // _mcgen_EVENT_BIT_SET

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "JonMon" event count 27
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = d8909c24-5be9-4502-98ca-ab7bdc24899d
EXTERN_C __declspec(selectany) const GUID JonMonProvider = {0xd8909c24, 0x5be9, 0x4502, {0x98, 0xca, 0xab, 0x7b, 0xdc, 0x24, 0x89, 0x9d}};

#ifndef JonMonProvider_Traits
#define JonMonProvider_Traits NULL
#endif // JonMonProvider_Traits

//
// Channel
//
#define JonMonProvider_CHANNEL_JonMon 0x10
#define JonMonProvider_CHANNEL_JonMon_KEYWORD 0x8000000000000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProcessCreation = {0x1, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define ProcessCreation_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProcessTerminate = {0x2, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define ProcessTerminate_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteThreadCreation = {0x3, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteThreadCreation_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ImageLoaded = {0x4, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define ImageLoaded_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ProcessAccess = {0x5, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define ProcessAccess_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RegistrySaveKey = {0x6, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RegistrySaveKey_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RegistrySetValueKey = {0x8, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RegistrySetValueKey_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RegistryCreateKey = {0x9, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RegistryCreateKey_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FileCreation = {0xa, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define FileCreation_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR NamedPipeCreation = {0xb, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define NamedPipeCreation_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR NamedPipeConnection = {0xc, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define NamedPipeConnection_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MailslotCreation = {0xd, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define MailslotCreation_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MailslotConnection = {0xe, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define MailslotConnection_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteFileConnection = {0xf, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteFileConnection_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DotNetLoad = {0x10, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define DotNetLoad_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WMIEventFilter = {0x11, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define WMIEventFilter_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RPCClient = {0x12, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RPCClient_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RPCServer = {0x13, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RPCServer_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DPAPIUnprotect = {0x14, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define DPAPIUnprotect_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR NetworkConnection = {0x15, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define NetworkConnection_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AMSI = {0x16, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define AMSI_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteReadProcessMemory = {0x17, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteReadProcessMemory_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteWriteProcessMemory = {0x18, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteWriteProcessMemory_value 0x18
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteVirtualAllocation = {0x19, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteVirtualAllocation_value 0x19
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RemoteQueueUserAPC = {0x1a, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define RemoteQueueUserAPC_value 0x1a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR QueryTokenImpersonation = {0x1b, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define QueryTokenImpersonation_value 0x1b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DebugLog102 = {0x66, 0x0, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define DebugLog102_value 0x66

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
// These variables are for use by MC-generated code and should not be used directly.
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG JonMonEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG JonMonKeywords[1] = {0x8000000000000000};
EXTERN_C __declspec(selectany) const unsigned char JonMonLevels[1] = {4};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT JonMonProvider_Context = {0, (ULONG_PTR)JonMonProvider_Traits, 0, 0, 0, 0, 0, 0, 1, JonMonEnableBits, JonMonKeywords, JonMonLevels};

//
// Provider REGHANDLE
//
#define JonMonHandle (JonMonProvider_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define JonMonProvider_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterJonMon
#define EventRegisterJonMon() McGenEventRegister(&JonMonProvider, McGenControlCallbackV2, &JonMonProvider_Context, &JonMonHandle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidJonMon
#define EventRegisterByGuidJonMon(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &JonMonProvider_Context, &JonMonHandle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterJonMon
#define EventUnregisterJonMon() McGenEventUnregister(&JonMonHandle)
#endif

//
// MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION macro:
// Define this macro to enable support for caller-allocated provider context.
//
#ifdef MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Advanced scenarios: Caller-allocated provider context.
// Use when multiple differently-configured provider handles are needed,
// e.g. for container-aware drivers, one context per container.
//
// Usage:
//
// - Caller enables the feature before including this header, e.g.
//   #define MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION 1
// - Caller allocates memory, e.g. pContext = malloc(sizeof(McGenContext_JonMon));
// - Caller registers the provider, e.g. EventRegisterJonMon_ForContext(pContext);
// - Caller writes events, e.g. EventWriteMyEvent_ForContext(pContext, ...);
// - Caller unregisters, e.g. EventUnregisterJonMon_ForContext(pContext);
// - Caller frees memory, e.g. free(pContext);
//

typedef struct tagMcGenContext_JonMon {
    // The fields of this structure are subject to change and should
    // not be accessed directly. To access the provider's REGHANDLE,
    // use JonMonHandle_ForContext(pContext).
    MCGEN_TRACE_CONTEXT Context;
    ULONG EnableBits[1];
} McGenContext_JonMon;

#define EventRegisterJonMon_ForContext(pContext)             _mcgen_PASTE2(_mcgen_RegisterForContext_JonMon_, MCGEN_EVENTREGISTER)(&JonMonProvider, pContext)
#define EventRegisterByGuidJonMon_ForContext(Guid, pContext) _mcgen_PASTE2(_mcgen_RegisterForContext_JonMon_, MCGEN_EVENTREGISTER)(&(Guid), pContext)
#define EventUnregisterJonMon_ForContext(pContext)           McGenEventUnregister(&(pContext)->Context.RegistrationHandle)

//
// Provider REGHANDLE for caller-allocated context.
//
#define JonMonHandle_ForContext(pContext) ((pContext)->Context.RegistrationHandle)

// This function is for use by MC-generated code and should not be used directly.
// Initialize and register the caller-allocated context.
__inline
ULONG __stdcall
_mcgen_PASTE2(_mcgen_RegisterForContext_JonMon_, MCGEN_EVENTREGISTER)(
    _In_ LPCGUID pProviderId,
    _Out_ McGenContext_JonMon* pContext)
{
    RtlZeroMemory(pContext, sizeof(*pContext));
    pContext->Context.Logger = (ULONG_PTR)JonMonProvider_Traits;
    pContext->Context.EnableBitsCount = 1;
    pContext->Context.EnableBitMask = pContext->EnableBits;
    pContext->Context.EnableKeyWords = JonMonKeywords;
    pContext->Context.EnableLevel = JonMonLevels;
    return McGenEventRegister(
        pProviderId,
        McGenControlCallbackV2,
        &pContext->Context,
        &pContext->Context.RegistrationHandle);
}

// This function is for use by MC-generated code and should not be used directly.
// Trigger a compile error if called with the wrong parameter type.
FORCEINLINE
_Ret_ McGenContext_JonMon*
_mcgen_CheckContextType_JonMon(_In_ McGenContext_JonMon* pContext)
{
    return pContext;
}

#endif // MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Enablement check macro for event "ProcessCreation"
//
#define EventEnabledProcessCreation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledProcessCreation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "ProcessCreation"
//
#define EventWriteProcessCreation(EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) \
        MCGEN_EVENT_ENABLED(ProcessCreation) \
        ? _mcgen_TEMPLATE_FOR_ProcessCreation(&JonMonProvider_Context, &ProcessCreation, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) : 0
#define EventWriteProcessCreation_AssumeEnabled(EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) \
        _mcgen_TEMPLATE_FOR_ProcessCreation(&JonMonProvider_Context, &ProcessCreation, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented)
#define EventWriteProcessCreation_ForContext(pContext, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ProcessCreation) \
        ? _mcgen_TEMPLATE_FOR_ProcessCreation(&(pContext)->Context, &ProcessCreation, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) : 0
#define EventWriteProcessCreation_ForContextAssumeEnabled(pContext, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented) \
        _mcgen_TEMPLATE_FOR_ProcessCreation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &ProcessCreation, EventTime, CreatorThreadId, CreatorProcessId, ParentProcessId, ParentProcessStartKey, ParentProcessFilePath, ParentProcessUser, ParentProcessUserLogonId, ParentProcessIntegrityLevel, ParentProcessSessionId, ParentProcessTokenType, ProcessFilePath, ProcessCommandLine, ProcessId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ProcessReparented)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ProcessCreation _mcgen_PASTE2(McTemplateU0yiiiizzqzqqzziizqqzqqt_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ProcessTerminate"
//
#define EventEnabledProcessTerminate() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledProcessTerminate_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "ProcessTerminate"
//
#define EventWriteProcessTerminate(EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) \
        MCGEN_EVENT_ENABLED(ProcessTerminate) \
        ? _mcgen_TEMPLATE_FOR_ProcessTerminate(&JonMonProvider_Context, &ProcessTerminate, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) : 0
#define EventWriteProcessTerminate_AssumeEnabled(EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) \
        _mcgen_TEMPLATE_FOR_ProcessTerminate(&JonMonProvider_Context, &ProcessTerminate, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId)
#define EventWriteProcessTerminate_ForContext(pContext, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ProcessTerminate) \
        ? _mcgen_TEMPLATE_FOR_ProcessTerminate(&(pContext)->Context, &ProcessTerminate, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) : 0
#define EventWriteProcessTerminate_ForContextAssumeEnabled(pContext, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId) \
        _mcgen_TEMPLATE_FOR_ProcessTerminate(&_mcgen_CheckContextType_JonMon(pContext)->Context, &ProcessTerminate, EventTime, SourceProcessId, SourceProcessStartKey, TargetProcessFilePath, TargetProcessId)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ProcessTerminate _mcgen_PASTE2(McTemplateU0yiizi_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteThreadCreation"
//
#define EventEnabledRemoteThreadCreation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteThreadCreation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteThreadCreation"
//
#define EventWriteRemoteThreadCreation(EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) \
        MCGEN_EVENT_ENABLED(RemoteThreadCreation) \
        ? _mcgen_TEMPLATE_FOR_RemoteThreadCreation(&JonMonProvider_Context, &RemoteThreadCreation, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) : 0
#define EventWriteRemoteThreadCreation_AssumeEnabled(EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) \
        _mcgen_TEMPLATE_FOR_RemoteThreadCreation(&JonMonProvider_Context, &RemoteThreadCreation, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId)
#define EventWriteRemoteThreadCreation_ForContext(pContext, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteThreadCreation) \
        ? _mcgen_TEMPLATE_FOR_RemoteThreadCreation(&(pContext)->Context, &RemoteThreadCreation, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) : 0
#define EventWriteRemoteThreadCreation_ForContextAssumeEnabled(pContext, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId) \
        _mcgen_TEMPLATE_FOR_RemoteThreadCreation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteThreadCreation, EventTime, SourceProcessId, SourceProcessStartKey, SourceThreadId, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, TargetProcessFilePath, TargetProcessId, TargetProcessStartKey, TargetThreadId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessUserLinkedLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteThreadCreation _mcgen_PASTE2(McTemplateU0yiiizzqzqqziiizqqzq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ImageLoaded"
//
#define EventEnabledImageLoaded() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledImageLoaded_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "ImageLoaded"
//
#define EventWriteImageLoaded(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) \
        MCGEN_EVENT_ENABLED(ImageLoaded) \
        ? _mcgen_TEMPLATE_FOR_ImageLoaded(&JonMonProvider_Context, &ImageLoaded, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) : 0
#define EventWriteImageLoaded_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) \
        _mcgen_TEMPLATE_FOR_ImageLoaded(&JonMonProvider_Context, &ImageLoaded, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage)
#define EventWriteImageLoaded_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ImageLoaded) \
        ? _mcgen_TEMPLATE_FOR_ImageLoaded(&(pContext)->Context, &ImageLoaded, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) : 0
#define EventWriteImageLoaded_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage) \
        _mcgen_TEMPLATE_FOR_ImageLoaded(&_mcgen_CheckContextType_JonMon(pContext)->Context, &ImageLoaded, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, ModulePath, SystemModeImage)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ImageLoaded _mcgen_PASTE2(McTemplateU0yziiizqqzqqzi_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ProcessAccess"
//
#define EventEnabledProcessAccess() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledProcessAccess_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "ProcessAccess"
//
#define EventWriteProcessAccess(EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) \
        MCGEN_EVENT_ENABLED(ProcessAccess) \
        ? _mcgen_TEMPLATE_FOR_ProcessAccess(&JonMonProvider_Context, &ProcessAccess, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) : 0
#define EventWriteProcessAccess_AssumeEnabled(EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) \
        _mcgen_TEMPLATE_FOR_ProcessAccess(&JonMonProvider_Context, &ProcessAccess, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType)
#define EventWriteProcessAccess_ForContext(pContext, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ProcessAccess) \
        ? _mcgen_TEMPLATE_FOR_ProcessAccess(&(pContext)->Context, &ProcessAccess, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) : 0
#define EventWriteProcessAccess_ForContextAssumeEnabled(pContext, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType) \
        _mcgen_TEMPLATE_FOR_ProcessAccess(&_mcgen_CheckContextType_JonMon(pContext)->Context, &ProcessAccess, EventTime, SourceProcessId, SourceThreadId, SourceProcessStartKey, SourceProcessFilePath, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceProcessTokenType, ProcessId, ProcessStartKey, ProcessFilePath, ProcessUser, ProcessUserLogonId, ProcessUserLinkedLogonId, ProcessIntegrityLevel, ProcessSessionId, ProcessTokenType, DesiredAccess, OperationType)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ProcessAccess _mcgen_PASTE2(McTemplateU0yiiizzqzqqiizzqqzqqdd_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RegistrySaveKey"
//
#define EventEnabledRegistrySaveKey() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRegistrySaveKey_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RegistrySaveKey"
//
#define EventWriteRegistrySaveKey(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        MCGEN_EVENT_ENABLED(RegistrySaveKey) \
        ? _mcgen_TEMPLATE_FOR_RegistrySaveKey(&JonMonProvider_Context, &RegistrySaveKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) : 0
#define EventWriteRegistrySaveKey_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        _mcgen_TEMPLATE_FOR_RegistrySaveKey(&JonMonProvider_Context, &RegistrySaveKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath)
#define EventWriteRegistrySaveKey_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RegistrySaveKey) \
        ? _mcgen_TEMPLATE_FOR_RegistrySaveKey(&(pContext)->Context, &RegistrySaveKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) : 0
#define EventWriteRegistrySaveKey_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        _mcgen_TEMPLATE_FOR_RegistrySaveKey(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RegistrySaveKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RegistrySaveKey _mcgen_PASTE2(McTemplateU0yziiizqzqz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RegistrySetValueKey"
//
#define EventEnabledRegistrySetValueKey() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRegistrySetValueKey_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RegistrySetValueKey"
//
#define EventWriteRegistrySetValueKey(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) \
        MCGEN_EVENT_ENABLED(RegistrySetValueKey) \
        ? _mcgen_TEMPLATE_FOR_RegistrySetValueKey(&JonMonProvider_Context, &RegistrySetValueKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) : 0
#define EventWriteRegistrySetValueKey_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) \
        _mcgen_TEMPLATE_FOR_RegistrySetValueKey(&JonMonProvider_Context, &RegistrySetValueKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName)
#define EventWriteRegistrySetValueKey_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RegistrySetValueKey) \
        ? _mcgen_TEMPLATE_FOR_RegistrySetValueKey(&(pContext)->Context, &RegistrySetValueKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) : 0
#define EventWriteRegistrySetValueKey_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName) \
        _mcgen_TEMPLATE_FOR_RegistrySetValueKey(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RegistrySetValueKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath, DataType, Data, ValueName)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RegistrySetValueKey _mcgen_PASTE2(McTemplateU0yziiizqzqzdzz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RegistryCreateKey"
//
#define EventEnabledRegistryCreateKey() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRegistryCreateKey_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RegistryCreateKey"
//
#define EventWriteRegistryCreateKey(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        MCGEN_EVENT_ENABLED(RegistryCreateKey) \
        ? _mcgen_TEMPLATE_FOR_RegistryCreateKey(&JonMonProvider_Context, &RegistryCreateKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) : 0
#define EventWriteRegistryCreateKey_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        _mcgen_TEMPLATE_FOR_RegistryCreateKey(&JonMonProvider_Context, &RegistryCreateKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath)
#define EventWriteRegistryCreateKey_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RegistryCreateKey) \
        ? _mcgen_TEMPLATE_FOR_RegistryCreateKey(&(pContext)->Context, &RegistryCreateKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) : 0
#define EventWriteRegistryCreateKey_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath) \
        _mcgen_TEMPLATE_FOR_RegistryCreateKey(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RegistryCreateKey, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, RegKeyPath)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RegistryCreateKey _mcgen_PASTE2(McTemplateU0yziiizqzqz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "FileCreation"
//
#define EventEnabledFileCreation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledFileCreation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "FileCreation"
//
#define EventWriteFileCreation(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        MCGEN_EVENT_ENABLED(FileCreation) \
        ? _mcgen_TEMPLATE_FOR_FileCreation(&JonMonProvider_Context, &FileCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) : 0
#define EventWriteFileCreation_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        _mcgen_TEMPLATE_FOR_FileCreation(&JonMonProvider_Context, &FileCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName)
#define EventWriteFileCreation_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, FileCreation) \
        ? _mcgen_TEMPLATE_FOR_FileCreation(&(pContext)->Context, &FileCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) : 0
#define EventWriteFileCreation_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        _mcgen_TEMPLATE_FOR_FileCreation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &FileCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_FileCreation _mcgen_PASTE2(McTemplateU0yziiizqzqz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "NamedPipeCreation"
//
#define EventEnabledNamedPipeCreation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledNamedPipeCreation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "NamedPipeCreation"
//
#define EventWriteNamedPipeCreation(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED(NamedPipeCreation) \
        ? _mcgen_TEMPLATE_FOR_NamedPipeCreation(&JonMonProvider_Context, &NamedPipeCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteNamedPipeCreation_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_NamedPipeCreation(&JonMonProvider_Context, &NamedPipeCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)
#define EventWriteNamedPipeCreation_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, NamedPipeCreation) \
        ? _mcgen_TEMPLATE_FOR_NamedPipeCreation(&(pContext)->Context, &NamedPipeCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteNamedPipeCreation_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_NamedPipeCreation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &NamedPipeCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_NamedPipeCreation _mcgen_PASTE2(McTemplateU0yziiizqzqzd_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "NamedPipeConnection"
//
#define EventEnabledNamedPipeConnection() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledNamedPipeConnection_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "NamedPipeConnection"
//
#define EventWriteNamedPipeConnection(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED(NamedPipeConnection) \
        ? _mcgen_TEMPLATE_FOR_NamedPipeConnection(&JonMonProvider_Context, &NamedPipeConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteNamedPipeConnection_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_NamedPipeConnection(&JonMonProvider_Context, &NamedPipeConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)
#define EventWriteNamedPipeConnection_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, NamedPipeConnection) \
        ? _mcgen_TEMPLATE_FOR_NamedPipeConnection(&(pContext)->Context, &NamedPipeConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteNamedPipeConnection_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_NamedPipeConnection(&_mcgen_CheckContextType_JonMon(pContext)->Context, &NamedPipeConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_NamedPipeConnection _mcgen_PASTE2(McTemplateU0yziiizqzqzd_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "MailslotCreation"
//
#define EventEnabledMailslotCreation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledMailslotCreation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "MailslotCreation"
//
#define EventWriteMailslotCreation(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED(MailslotCreation) \
        ? _mcgen_TEMPLATE_FOR_MailslotCreation(&JonMonProvider_Context, &MailslotCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteMailslotCreation_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_MailslotCreation(&JonMonProvider_Context, &MailslotCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)
#define EventWriteMailslotCreation_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, MailslotCreation) \
        ? _mcgen_TEMPLATE_FOR_MailslotCreation(&(pContext)->Context, &MailslotCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteMailslotCreation_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_MailslotCreation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &MailslotCreation, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_MailslotCreation _mcgen_PASTE2(McTemplateU0yziiizqzqzd_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "MailslotConnection"
//
#define EventEnabledMailslotConnection() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledMailslotConnection_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "MailslotConnection"
//
#define EventWriteMailslotConnection(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED(MailslotConnection) \
        ? _mcgen_TEMPLATE_FOR_MailslotConnection(&JonMonProvider_Context, &MailslotConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteMailslotConnection_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_MailslotConnection(&JonMonProvider_Context, &MailslotConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)
#define EventWriteMailslotConnection_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, MailslotConnection) \
        ? _mcgen_TEMPLATE_FOR_MailslotConnection(&(pContext)->Context, &MailslotConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) : 0
#define EventWriteMailslotConnection_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights) \
        _mcgen_TEMPLATE_FOR_MailslotConnection(&_mcgen_CheckContextType_JonMon(pContext)->Context, &MailslotConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName, RequestedRights)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_MailslotConnection _mcgen_PASTE2(McTemplateU0yziiizqzqzd_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteFileConnection"
//
#define EventEnabledRemoteFileConnection() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteFileConnection_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteFileConnection"
//
#define EventWriteRemoteFileConnection(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        MCGEN_EVENT_ENABLED(RemoteFileConnection) \
        ? _mcgen_TEMPLATE_FOR_RemoteFileConnection(&JonMonProvider_Context, &RemoteFileConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) : 0
#define EventWriteRemoteFileConnection_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        _mcgen_TEMPLATE_FOR_RemoteFileConnection(&JonMonProvider_Context, &RemoteFileConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName)
#define EventWriteRemoteFileConnection_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteFileConnection) \
        ? _mcgen_TEMPLATE_FOR_RemoteFileConnection(&(pContext)->Context, &RemoteFileConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) : 0
#define EventWriteRemoteFileConnection_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName) \
        _mcgen_TEMPLATE_FOR_RemoteFileConnection(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteFileConnection, EventTime, ProcessFilePath, ProcessId, ProcessThreadId, ProcessStartKey, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, FileName)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteFileConnection _mcgen_PASTE2(McTemplateU0yziiizqzqz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "DotNetLoad"
//
#define EventEnabledDotNetLoad() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledDotNetLoad_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "DotNetLoad"
//
#define EventWriteDotNetLoad(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) \
        MCGEN_EVENT_ENABLED(DotNetLoad) \
        ? _mcgen_TEMPLATE_FOR_DotNetLoad(&JonMonProvider_Context, &DotNetLoad, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) : 0
#define EventWriteDotNetLoad_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) \
        _mcgen_TEMPLATE_FOR_DotNetLoad(&JonMonProvider_Context, &DotNetLoad, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID)
#define EventWriteDotNetLoad_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, DotNetLoad) \
        ? _mcgen_TEMPLATE_FOR_DotNetLoad(&(pContext)->Context, &DotNetLoad, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) : 0
#define EventWriteDotNetLoad_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID) \
        _mcgen_TEMPLATE_FOR_DotNetLoad(&_mcgen_CheckContextType_JonMon(pContext)->Context, &DotNetLoad, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AssemblyName, ClrInstanceID)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_DotNetLoad _mcgen_PASTE2(McTemplateU0yzizqzqzh_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "WMIEventFilter"
//
#define EventEnabledWMIEventFilter() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledWMIEventFilter_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "WMIEventFilter"
//
#define EventWriteWMIEventFilter(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) \
        MCGEN_EVENT_ENABLED(WMIEventFilter) \
        ? _mcgen_TEMPLATE_FOR_WMIEventFilter(&JonMonProvider_Context, &WMIEventFilter, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) : 0
#define EventWriteWMIEventFilter_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) \
        _mcgen_TEMPLATE_FOR_WMIEventFilter(&JonMonProvider_Context, &WMIEventFilter, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause)
#define EventWriteWMIEventFilter_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, WMIEventFilter) \
        ? _mcgen_TEMPLATE_FOR_WMIEventFilter(&(pContext)->Context, &WMIEventFilter, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) : 0
#define EventWriteWMIEventFilter_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause) \
        _mcgen_TEMPLATE_FOR_WMIEventFilter(&_mcgen_CheckContextType_JonMon(pContext)->Context, &WMIEventFilter, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, Namespace, ESS, Consumer, PossibleCause)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_WMIEventFilter _mcgen_PASTE2(McTemplateU0yzizqzqzzzz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RPCClient"
//
#define EventEnabledRPCClient() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRPCClient_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RPCClient"
//
#define EventWriteRPCClient(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        MCGEN_EVENT_ENABLED(RPCClient) \
        ? _mcgen_TEMPLATE_FOR_RPCClient(&JonMonProvider_Context, &RPCClient, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) : 0
#define EventWriteRPCClient_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        _mcgen_TEMPLATE_FOR_RPCClient(&JonMonProvider_Context, &RPCClient, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack)
#define EventWriteRPCClient_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RPCClient) \
        ? _mcgen_TEMPLATE_FOR_RPCClient(&(pContext)->Context, &RPCClient, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) : 0
#define EventWriteRPCClient_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        _mcgen_TEMPLATE_FOR_RPCClient(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RPCClient, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RPCClient _mcgen_PASTE2(McTemplateU0yzizqzqzqqzzzzz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RPCServer"
//
#define EventEnabledRPCServer() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRPCServer_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RPCServer"
//
#define EventWriteRPCServer(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        MCGEN_EVENT_ENABLED(RPCServer) \
        ? _mcgen_TEMPLATE_FOR_RPCServer(&JonMonProvider_Context, &RPCServer, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) : 0
#define EventWriteRPCServer_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        _mcgen_TEMPLATE_FOR_RPCServer(&JonMonProvider_Context, &RPCServer, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack)
#define EventWriteRPCServer_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RPCServer) \
        ? _mcgen_TEMPLATE_FOR_RPCServer(&(pContext)->Context, &RPCServer, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) : 0
#define EventWriteRPCServer_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack) \
        _mcgen_TEMPLATE_FOR_RPCServer(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RPCServer, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, InterfaceUUID, ProcNum, Protocol, NetworkAddress, Endpoint, InterfaceString, MethodString, CallStack)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RPCServer _mcgen_PASTE2(McTemplateU0yzizqzqzqqzzzzz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "DPAPIUnprotect"
//
#define EventEnabledDPAPIUnprotect() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledDPAPIUnprotect_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "DPAPIUnprotect"
//
#define EventWriteDPAPIUnprotect(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) \
        MCGEN_EVENT_ENABLED(DPAPIUnprotect) \
        ? _mcgen_TEMPLATE_FOR_DPAPIUnprotect(&JonMonProvider_Context, &DPAPIUnprotect, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) : 0
#define EventWriteDPAPIUnprotect_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) \
        _mcgen_TEMPLATE_FOR_DPAPIUnprotect(&JonMonProvider_Context, &DPAPIUnprotect, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags)
#define EventWriteDPAPIUnprotect_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, DPAPIUnprotect) \
        ? _mcgen_TEMPLATE_FOR_DPAPIUnprotect(&(pContext)->Context, &DPAPIUnprotect, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) : 0
#define EventWriteDPAPIUnprotect_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags) \
        _mcgen_TEMPLATE_FOR_DPAPIUnprotect(&_mcgen_CheckContextType_JonMon(pContext)->Context, &DPAPIUnprotect, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, OperationType, DataDescription, Flags, ProtectionFlags)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_DPAPIUnprotect _mcgen_PASTE2(McTemplateU0yzizqzqzzqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "NetworkConnection"
//
#define EventEnabledNetworkConnection() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledNetworkConnection_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "NetworkConnection"
//
#define EventWriteNetworkConnection(EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) \
        MCGEN_EVENT_ENABLED(NetworkConnection) \
        ? _mcgen_TEMPLATE_FOR_NetworkConnection(&JonMonProvider_Context, &NetworkConnection, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) : 0
#define EventWriteNetworkConnection_AssumeEnabled(EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) \
        _mcgen_TEMPLATE_FOR_NetworkConnection(&JonMonProvider_Context, &NetworkConnection, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId)
#define EventWriteNetworkConnection_ForContext(pContext, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, NetworkConnection) \
        ? _mcgen_TEMPLATE_FOR_NetworkConnection(&(pContext)->Context, &NetworkConnection, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) : 0
#define EventWriteNetworkConnection_ForContextAssumeEnabled(pContext, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId) \
        _mcgen_TEMPLATE_FOR_NetworkConnection(&_mcgen_CheckContextType_JonMon(pContext)->Context, &NetworkConnection, EventTime, ProcessId, ProcessFilePath, SrcIpAddressIpv4, DestIpAddressIpv4, SrcPort, DestPort, Initiated, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_NetworkConnection _mcgen_PASTE2(McTemplateU0yqzzzhhtzqzq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "AMSI"
//
#define EventEnabledAMSI() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledAMSI_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "AMSI"
//
#define EventWriteAMSI(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) \
        MCGEN_EVENT_ENABLED(AMSI) \
        ? _mcgen_TEMPLATE_FOR_AMSI(&JonMonProvider_Context, &AMSI, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) : 0
#define EventWriteAMSI_AssumeEnabled(EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) \
        _mcgen_TEMPLATE_FOR_AMSI(&JonMonProvider_Context, &AMSI, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent)
#define EventWriteAMSI_ForContext(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, AMSI) \
        ? _mcgen_TEMPLATE_FOR_AMSI(&(pContext)->Context, &AMSI, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) : 0
#define EventWriteAMSI_ForContextAssumeEnabled(pContext, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent) \
        _mcgen_TEMPLATE_FOR_AMSI(&_mcgen_CheckContextType_JonMon(pContext)->Context, &AMSI, EventTime, ProcessFilePath, ProcessId, ProcessUser, ProcessUserLogonId, ProcessIntegrityLevel, ProcessSessionId, AppName, ContentName, ScanStatus, ScanResult, ContentSize, Content, DecodedContent)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_AMSI _mcgen_PASTE2(McTemplateU0yzizqzqzzuqqbr11z_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteReadProcessMemory"
//
#define EventEnabledRemoteReadProcessMemory() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteReadProcessMemory_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteReadProcessMemory"
//
#define EventWriteRemoteReadProcessMemory(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        MCGEN_EVENT_ENABLED(RemoteReadProcessMemory) \
        ? _mcgen_TEMPLATE_FOR_RemoteReadProcessMemory(&JonMonProvider_Context, &RemoteReadProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) : 0
#define EventWriteRemoteReadProcessMemory_AssumeEnabled(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        _mcgen_TEMPLATE_FOR_RemoteReadProcessMemory(&JonMonProvider_Context, &RemoteReadProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey)
#define EventWriteRemoteReadProcessMemory_ForContext(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteReadProcessMemory) \
        ? _mcgen_TEMPLATE_FOR_RemoteReadProcessMemory(&(pContext)->Context, &RemoteReadProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) : 0
#define EventWriteRemoteReadProcessMemory_ForContextAssumeEnabled(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        _mcgen_TEMPLATE_FOR_RemoteReadProcessMemory(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteReadProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteReadProcessMemory _mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxx_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteWriteProcessMemory"
//
#define EventEnabledRemoteWriteProcessMemory() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteWriteProcessMemory_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteWriteProcessMemory"
//
#define EventWriteRemoteWriteProcessMemory(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        MCGEN_EVENT_ENABLED(RemoteWriteProcessMemory) \
        ? _mcgen_TEMPLATE_FOR_RemoteWriteProcessMemory(&JonMonProvider_Context, &RemoteWriteProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) : 0
#define EventWriteRemoteWriteProcessMemory_AssumeEnabled(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        _mcgen_TEMPLATE_FOR_RemoteWriteProcessMemory(&JonMonProvider_Context, &RemoteWriteProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey)
#define EventWriteRemoteWriteProcessMemory_ForContext(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteWriteProcessMemory) \
        ? _mcgen_TEMPLATE_FOR_RemoteWriteProcessMemory(&(pContext)->Context, &RemoteWriteProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) : 0
#define EventWriteRemoteWriteProcessMemory_ForContextAssumeEnabled(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey) \
        _mcgen_TEMPLATE_FOR_RemoteWriteProcessMemory(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteWriteProcessMemory, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteWriteProcessMemory _mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxx_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteVirtualAllocation"
//
#define EventEnabledRemoteVirtualAllocation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteVirtualAllocation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteVirtualAllocation"
//
#define EventWriteRemoteVirtualAllocation(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) \
        MCGEN_EVENT_ENABLED(RemoteVirtualAllocation) \
        ? _mcgen_TEMPLATE_FOR_RemoteVirtualAllocation(&JonMonProvider_Context, &RemoteVirtualAllocation, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) : 0
#define EventWriteRemoteVirtualAllocation_AssumeEnabled(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) \
        _mcgen_TEMPLATE_FOR_RemoteVirtualAllocation(&JonMonProvider_Context, &RemoteVirtualAllocation, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress)
#define EventWriteRemoteVirtualAllocation_ForContext(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteVirtualAllocation) \
        ? _mcgen_TEMPLATE_FOR_RemoteVirtualAllocation(&(pContext)->Context, &RemoteVirtualAllocation, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) : 0
#define EventWriteRemoteVirtualAllocation_ForContextAssumeEnabled(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress) \
        _mcgen_TEMPLATE_FOR_RemoteVirtualAllocation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteVirtualAllocation, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, BaseAddress)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteVirtualAllocation _mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxxx_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RemoteQueueUserAPC"
//
#define EventEnabledRemoteQueueUserAPC() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledRemoteQueueUserAPC_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "RemoteQueueUserAPC"
//
#define EventWriteRemoteQueueUserAPC(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) \
        MCGEN_EVENT_ENABLED(RemoteQueueUserAPC) \
        ? _mcgen_TEMPLATE_FOR_RemoteQueueUserAPC(&JonMonProvider_Context, &RemoteQueueUserAPC, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) : 0
#define EventWriteRemoteQueueUserAPC_AssumeEnabled(EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) \
        _mcgen_TEMPLATE_FOR_RemoteQueueUserAPC(&JonMonProvider_Context, &RemoteQueueUserAPC, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3)
#define EventWriteRemoteQueueUserAPC_ForContext(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RemoteQueueUserAPC) \
        ? _mcgen_TEMPLATE_FOR_RemoteQueueUserAPC(&(pContext)->Context, &RemoteQueueUserAPC, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) : 0
#define EventWriteRemoteQueueUserAPC_ForContextAssumeEnabled(pContext, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3) \
        _mcgen_TEMPLATE_FOR_RemoteQueueUserAPC(&_mcgen_CheckContextType_JonMon(pContext)->Context, &RemoteQueueUserAPC, EventTime_, SourceProcessFilePath, SourceProcessId, SourceProcessUser, SourceProcessUserLogonId, SourceProcessIntegrityLevel, SourceProcessSessionId, SourceThreadId, TargetProcessFilePath, TargetProcessId, TargetProcessUser, TargetProcessUserLogonId, TargetProcessIntegrityLevel, TargetProcessSessionId, SourceProcessStartKey, TargetProcessStartKey, ApcRoutine, ApcArgument1, ApcArgument2, ApcArgument3)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RemoteQueueUserAPC _mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxxxxxx_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "QueryTokenImpersonation"
//
#define EventEnabledQueryTokenImpersonation() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledQueryTokenImpersonation_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "QueryTokenImpersonation"
//
#define EventWriteQueryTokenImpersonation(EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) \
        MCGEN_EVENT_ENABLED(QueryTokenImpersonation) \
        ? _mcgen_TEMPLATE_FOR_QueryTokenImpersonation(&JonMonProvider_Context, &QueryTokenImpersonation, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) : 0
#define EventWriteQueryTokenImpersonation_AssumeEnabled(EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) \
        _mcgen_TEMPLATE_FOR_QueryTokenImpersonation(&JonMonProvider_Context, &QueryTokenImpersonation, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName)
#define EventWriteQueryTokenImpersonation_ForContext(pContext, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, QueryTokenImpersonation) \
        ? _mcgen_TEMPLATE_FOR_QueryTokenImpersonation(&(pContext)->Context, &QueryTokenImpersonation, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) : 0
#define EventWriteQueryTokenImpersonation_ForContextAssumeEnabled(pContext, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName) \
        _mcgen_TEMPLATE_FOR_QueryTokenImpersonation(&_mcgen_CheckContextType_JonMon(pContext)->Context, &QueryTokenImpersonation, EventTime_, ProcessFilePath, ProcessId, ProcessUserName, ProcessUserLogonId, ProcessIntegrityLevel, TargetThreadId, TargetThreadIntegrityLevel, TargetThreadUserName)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_QueryTokenImpersonation _mcgen_PASTE2(McTemplateU0yzqzqzqzz_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "DebugLog102"
//
#define EventEnabledDebugLog102() _mcgen_EVENT_BIT_SET(JonMonEnableBits, 0)
#define EventEnabledDebugLog102_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_JonMon(pContext)->EnableBits, 0)

//
// Event write macros for event "DebugLog102"
//
#define EventWriteDebugLog102(EventId, ProtectionLevel) \
        MCGEN_EVENT_ENABLED(DebugLog102) \
        ? _mcgen_TEMPLATE_FOR_DebugLog102(&JonMonProvider_Context, &DebugLog102, EventId, ProtectionLevel) : 0
#define EventWriteDebugLog102_AssumeEnabled(EventId, ProtectionLevel) \
        _mcgen_TEMPLATE_FOR_DebugLog102(&JonMonProvider_Context, &DebugLog102, EventId, ProtectionLevel)
#define EventWriteDebugLog102_ForContext(pContext, EventId, ProtectionLevel) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, DebugLog102) \
        ? _mcgen_TEMPLATE_FOR_DebugLog102(&(pContext)->Context, &DebugLog102, EventId, ProtectionLevel) : 0
#define EventWriteDebugLog102_ForContextAssumeEnabled(pContext, EventId, ProtectionLevel) \
        _mcgen_TEMPLATE_FOR_DebugLog102(&_mcgen_CheckContextType_JonMon(pContext)->Context, &DebugLog102, EventId, ProtectionLevel)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_DebugLog102 _mcgen_PASTE2(McTemplateU0dt_, MCGEN_EVENTWRITETRANSFER)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//

//
// Function for template "EID102" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0dt_def
#define McTemplateU0dt_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0dt_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const signed int  _Arg0,
    _In_ const signed int  _Arg1
    )
{
#define McTemplateU0dt_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0dt_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0dt_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0dt_def

//
// Function for template "EID1" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yiiiizzqzqqzziizqqzqqt_def
#define McTemplateU0yiiiizzqzqqzziizqqzqqt_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yiiiizzqzqqzziizqqzqqt_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_opt_ PCWSTR  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_opt_ PCWSTR  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_ const signed __int64  _Arg13,
    _In_ const signed __int64  _Arg14,
    _In_opt_ PCWSTR  _Arg15,
    _In_ const unsigned int  _Arg16,
    _In_ const unsigned int  _Arg17,
    _In_opt_ PCWSTR  _Arg18,
    _In_ const unsigned int  _Arg19,
    _In_ const unsigned int  _Arg20,
    _In_ const signed int  _Arg21
    )
{
#define McTemplateU0yiiiizzqzqqzziizqqzqqt_ARGCOUNT 22

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yiiiizzqzqqzziizqqzqqt_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],
                        (_Arg6 != NULL) ? _Arg6 : L"NULL",
                        (_Arg6 != NULL) ? (ULONG)((wcslen(_Arg6) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12],
                        (_Arg11 != NULL) ? _Arg11 : L"NULL",
                        (_Arg11 != NULL) ? (ULONG)((wcslen(_Arg11) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[16],
                        (_Arg15 != NULL) ? _Arg15 : L"NULL",
                        (_Arg15 != NULL) ? (ULONG)((wcslen(_Arg15) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[18],&_Arg17, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[19],
                        (_Arg18 != NULL) ? _Arg18 : L"NULL",
                        (_Arg18 != NULL) ? (ULONG)((wcslen(_Arg18) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[21],&_Arg20, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[22],&_Arg21, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yiiiizzqzqqzziizqqzqqt_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yiiiizzqzqqzziizqqzqqt_def

//
// Function for template "EID5" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yiiizzqzqqiizzqqzqqdd_def
#define McTemplateU0yiiizzqzqqiizzqqzqqdd_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yiiizzqzqqiizzqqzqqdd_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const signed __int64  _Arg10,
    _In_ const signed __int64  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_opt_ PCWSTR  _Arg13,
    _In_ const unsigned int  _Arg14,
    _In_ const unsigned int  _Arg15,
    _In_opt_ PCWSTR  _Arg16,
    _In_ const unsigned int  _Arg17,
    _In_ const unsigned int  _Arg18,
    _In_ const signed int  _Arg19,
    _In_ const signed int  _Arg20
    )
{
#define McTemplateU0yiiizzqzqqiizzqqzqqdd_ARGCOUNT 21

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yiiizzqzqqiizzqqzqqdd_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],
                        (_Arg13 != NULL) ? _Arg13 : L"NULL",
                        (_Arg13 != NULL) ? (ULONG)((wcslen(_Arg13) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[17],
                        (_Arg16 != NULL) ? _Arg16 : L"NULL",
                        (_Arg16 != NULL) ? (ULONG)((wcslen(_Arg16) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[18],&_Arg17, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[19],&_Arg18, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[21],&_Arg20, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yiiizzqzqqiizzqqzqqdd_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yiiizzqzqqiizzqqzqqdd_def

//
// Function for template "EID3" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yiiizzqzqqziiizqqzq_def
#define McTemplateU0yiiizzqzqqziiizqqzq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yiiizzqzqqziiizqqzq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_ const signed __int64  _Arg11,
    _In_ const signed __int64  _Arg12,
    _In_ const signed __int64  _Arg13,
    _In_opt_ PCWSTR  _Arg14,
    _In_ const unsigned int  _Arg15,
    _In_ const unsigned int  _Arg16,
    _In_opt_ PCWSTR  _Arg17,
    _In_ const unsigned int  _Arg18
    )
{
#define McTemplateU0yiiizzqzqqziiizqqzq_ARGCOUNT 19

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yiiizzqzqqziiizqqzq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[15],
                        (_Arg14 != NULL) ? _Arg14 : L"NULL",
                        (_Arg14 != NULL) ? (ULONG)((wcslen(_Arg14) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[18],
                        (_Arg17 != NULL) ? _Arg17 : L"NULL",
                        (_Arg17 != NULL) ? (ULONG)((wcslen(_Arg17) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[19],&_Arg18, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yiiizzqzqqziiizqqzq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yiiizzqzqqziiizqqzq_def

//
// Function for template "EID2" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yiizi_def
#define McTemplateU0yiizi_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yiizi_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const signed __int64  _Arg4
    )
{
#define McTemplateU0yiizi_ARGCOUNT 5

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yiizi_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yiizi_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yiizi_def

//
// Function for template "EID21" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yqzzzhhtzqzq_def
#define McTemplateU0yqzzzhhtzqzq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yqzzzhhtzqzq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4,
    _In_ const unsigned short  _Arg5,
    _In_ const unsigned short  _Arg6,
    _In_ const signed int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_ const unsigned int  _Arg11
    )
{
#define McTemplateU0yqzzzhhtzqzq_ARGCOUNT 12

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yqzzzhhtzqzq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3],
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yqzzzhhtzqzq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yqzzzhhtzqzq_def

//
// Function for template "EID4" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yziiizqqzqqzi_def
#define McTemplateU0yziiizqqzqqzi_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yziiizqqzqqzi_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_opt_ PCWSTR  _Arg11,
    _In_ const signed __int64  _Arg12
    )
{
#define McTemplateU0yziiizqqzqqzi_ARGCOUNT 13

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yziiizqqzqqzi_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12],
                        (_Arg11 != NULL) ? _Arg11 : L"NULL",
                        (_Arg11 != NULL) ? (ULONG)((wcslen(_Arg11) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const signed __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yziiizqqzqqzi_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yziiizqqzqqzi_def

//
// Function for template "EID6" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yziiizqzqz_def
#define McTemplateU0yziiizqzqz_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yziiizqzqz_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ PCWSTR  _Arg9
    )
{
#define McTemplateU0yziiizqzqz_ARGCOUNT 10

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yziiizqzqz_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yziiizqzqz_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yziiizqzqz_def

//
// Function for template "EID11" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yziiizqzqzd_def
#define McTemplateU0yziiizqzqzd_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yziiizqzqzd_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ PCWSTR  _Arg9,
    _In_ const signed int  _Arg10
    )
{
#define McTemplateU0yziiizqzqzd_ARGCOUNT 11

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yziiizqzqzd_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yziiizqzqzd_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yziiizqzqzd_def

//
// Function for template "EID8" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yziiizqzqzdzz_def
#define McTemplateU0yziiizqzqzdzz_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yziiizqzqzdzz_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_opt_ PCWSTR  _Arg9,
    _In_ const signed int  _Arg10,
    _In_opt_ PCWSTR  _Arg11,
    _In_opt_ PCWSTR  _Arg12
    )
{
#define McTemplateU0yziiizqzqzdzz_ARGCOUNT 13

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yziiizqzqzdzz_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[12],
                        (_Arg11 != NULL) ? _Arg11 : L"NULL",
                        (_Arg11 != NULL) ? (ULONG)((wcslen(_Arg11) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yziiizqzqzdzz_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yziiizqzqzdzz_def

//
// Function for template "EID23" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqqzizqzqxx_def
#define McTemplateU0yzizqzqqzizqzqxx_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxx_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const signed __int64  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_ const unsigned int  _Arg13,
    _In_ const unsigned __int64  _Arg14,
    _In_ const unsigned __int64  _Arg15
    )
{
#define McTemplateU0yzizqzqqzizqzqxx_ARGCOUNT 16

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqqzizqzqxx_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqqzizqzqxx_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqqzizqzqxx_def

//
// Function for template "EID25" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqqzizqzqxxx_def
#define McTemplateU0yzizqzqqzizqzqxxx_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxxx_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const signed __int64  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_ const unsigned int  _Arg13,
    _In_ const unsigned __int64  _Arg14,
    _In_ const unsigned __int64  _Arg15,
    _In_ const unsigned __int64  _Arg16
    )
{
#define McTemplateU0yzizqzqqzizqzqxxx_ARGCOUNT 17

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqqzizqzqxxx_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqqzizqzqxxx_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqqzizqzqxxx_def

//
// Function for template "EID26" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqqzizqzqxxxxxx_def
#define McTemplateU0yzizqzqqzizqzqxxxxxx_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqqzizqzqxxxxxx_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const signed __int64  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_ const unsigned int  _Arg13,
    _In_ const unsigned __int64  _Arg14,
    _In_ const unsigned __int64  _Arg15,
    _In_ const unsigned __int64  _Arg16,
    _In_ const unsigned __int64  _Arg17,
    _In_ const unsigned __int64  _Arg18,
    _In_ const unsigned __int64  _Arg19
    )
{
#define McTemplateU0yzizqzqqzizqzqxxxxxx_ARGCOUNT 20

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqqzizqzqxxxxxx_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[18],&_Arg17, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[19],&_Arg18, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const unsigned __int64)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqqzizqzqxxxxxx_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqqzizqzqxxxxxx_def

//
// Function for template "EID16" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqzh_def
#define McTemplateU0yzizqzqzh_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqzh_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned short  _Arg8
    )
{
#define McTemplateU0yzizqzqzh_ARGCOUNT 9

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqzh_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned short)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqzh_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqzh_def

//
// Function for template "EID18" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqzqqzzzzz_def
#define McTemplateU0yzizqzqzqqzzzzz_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqzqqzzzzz_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_opt_ PCWSTR  _Arg10,
    _In_opt_ PCWSTR  _Arg11,
    _In_opt_ PCWSTR  _Arg12,
    _In_opt_ PCWSTR  _Arg13,
    _In_opt_ PCWSTR  _Arg14
    )
{
#define McTemplateU0yzizqzqzqqzzzzz_ARGCOUNT 15

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqzqqzzzzz_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[12],
                        (_Arg11 != NULL) ? _Arg11 : L"NULL",
                        (_Arg11 != NULL) ? (ULONG)((wcslen(_Arg11) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[13],
                        (_Arg12 != NULL) ? _Arg12 : L"NULL",
                        (_Arg12 != NULL) ? (ULONG)((wcslen(_Arg12) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[14],
                        (_Arg13 != NULL) ? _Arg13 : L"NULL",
                        (_Arg13 != NULL) ? (ULONG)((wcslen(_Arg13) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[15],
                        (_Arg14 != NULL) ? _Arg14 : L"NULL",
                        (_Arg14 != NULL) ? (ULONG)((wcslen(_Arg14) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqzqqzzzzz_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqzqqzzzzz_def

//
// Function for template "EID20" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqzzqq_def
#define McTemplateU0yzizqzqzzqq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqzzqq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10
    )
{
#define McTemplateU0yzizqzqzzqq_ARGCOUNT 11

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqzzqq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqzzqq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqzzqq_def

//
// Function for template "EID22" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqzzuqqbr11z_def
#define McTemplateU0yzizqzqzzuqqbr11z_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqzzuqqbr11z_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_ const unsigned char  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_reads_(_Arg11) const unsigned char*  _Arg12,
    _In_opt_ PCWSTR  _Arg13
    )
{
#define McTemplateU0yzizqzqzzuqqbr11z_ARGCOUNT 14

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqzzuqqbr11z_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned char)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],_Arg12, (ULONG)sizeof(char)*_Arg11);

    EventDataDescCreate(&EventData[14],
                        (_Arg13 != NULL) ? _Arg13 : L"NULL",
                        (_Arg13 != NULL) ? (ULONG)((wcslen(_Arg13) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqzzuqqbr11z_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqzzuqqbr11z_def

//
// Function for template "EID17" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzizqzqzzzz_def
#define McTemplateU0yzizqzqzzzz_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzizqzqzzzz_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8,
    _In_opt_ PCWSTR  _Arg9,
    _In_opt_ PCWSTR  _Arg10
    )
{
#define McTemplateU0yzizqzqzzzz_ARGCOUNT 11

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzizqzqzzzz_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[10],
                        (_Arg9 != NULL) ? _Arg9 : L"NULL",
                        (_Arg9 != NULL) ? (ULONG)((wcslen(_Arg9) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[11],
                        (_Arg10 != NULL) ? _Arg10 : L"NULL",
                        (_Arg10 != NULL) ? (ULONG)((wcslen(_Arg10) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzizqzqzzzz_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzizqzqzzzz_def

//
// Function for template "EID27" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0yzqzqzqzz_def
#define McTemplateU0yzqzqzqzz_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0yzqzqzqzz_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const SYSTEMTIME*  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_opt_ PCWSTR  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_opt_ PCWSTR  _Arg7,
    _In_opt_ PCWSTR  _Arg8
    )
{
#define McTemplateU0yzqzqzqzz_ARGCOUNT 9

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0yzqzqzqzz_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],_Arg0, sizeof(SYSTEMTIME)  );

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],
                        (_Arg5 != NULL) ? _Arg5 : L"NULL",
                        (_Arg5 != NULL) ? (ULONG)((wcslen(_Arg5) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],
                        (_Arg7 != NULL) ? _Arg7 : L"NULL",
                        (_Arg7 != NULL) ? (ULONG)((wcslen(_Arg7) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[9],
                        (_Arg8 != NULL) ? _Arg8 : L"NULL",
                        (_Arg8 != NULL) ? (ULONG)((wcslen(_Arg8) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0yzqzqzqzz_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0yzqzqzqzz_def

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
}
#endif

#define MSG_ProcessCreation_EventMessage     0xB0000001L
#define MSG_ProcessTerminate_EventMessage    0xB0000002L
#define MSG_RemoteThreadCreation_EventMessage 0xB0000003L
#define MSG_ImageLoaded_EventMessage         0xB0000004L
#define MSG_ProcessAccess_EventMessage       0xB0000005L
#define MSG_RegistrySaveKey_EventMessage     0xB0000006L
#define MSG_RegistrySetValueKey_EventMessage 0xB0000008L
#define MSG_RegistryCreateKey_EventMessage   0xB0000009L
#define MSG_FileCreation_EventMessage        0xB000000AL
#define MSG_NamedPipeCreation_EventMessage   0xB000000BL
#define MSG_NamedPipeConnection_EventMessage 0xB000000CL
#define MSG_MailslotCreation_EventMessage    0xB000000DL
#define MSG_MailslotConnection_EventMessage  0xB000000EL
#define MSG_RemoteFileConnection_EventMessage 0xB000000FL
#define MSG_DotNetLoad_EventMessage          0xB0000010L
#define MSG_WMIEventFilter_EventMessage      0xB0000011L
#define MSG_RPCClient_EventMessage           0xB0000012L
#define MSG_RPCServer_EventMessage           0xB0000013L
#define MSG_DPAPIUnprotect_EventMessage      0xB0000014L
#define MSG_NetworkConnection_EventMessage   0xB0000015L
#define MSG_AMSI_EventMessage                0xB0000016L
#define MSG_RemoteReadProcessMemory_EventMessage 0xB0000017L
#define MSG_RemoteWriteProcessMemory_EventMessage 0xB0000018L
#define MSG_RemoteVirtualAllocation_EventMessage 0xB0000019L
#define MSG_RemoteQueueUserAPC_EventMessage  0xB000001AL
#define MSG_QueryTokenImpersonation_EventMessage 0xB000001BL
#define MSG_DebugLog102_EventMessage         0xB0000066L
